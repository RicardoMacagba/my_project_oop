<?php
namespace App\Controllers;

/**
 * This class is the base class for Controllers
 */
class Controller {
    /**
     * @var string $layout The layout file to be used for rendering views
     */
    protected $layout;

    /**
     * @var string $pageTitle The title of the current page
     */
    protected $pageTitle;

    /**
     * @var string $route The current route
     */
    protected $route;

    /**
     * @var string $csrf_token The CSRF token for form validation
     */
    protected $csrf_token;

    /**
     * @var string $homeUrl The URL of the home page
     */
    protected $homeUrl;

    /**
     * @var array $errors An array to store error messages
     */
    protected $errors = [];

    /**
     * Constructor to initialize default values
     */
    public function __construct() {
        $this->layout = "layout/main"; // Set default page layout
        $this->pageTitle = "Home";
        $errors = [];
    }

    /**
     * Generate a CSRF token and store it in the session
     */
    public function generateCsrfToken() {
        // Automatically generate a CSRF token if it's not present
        if (empty($_SESSION['csrf_token'])) {
            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));  // Generate a secure CSRF token
        }
        $this->csrf_token = $_SESSION['csrf_token'];
    }

    /**
     * Validate the CSRF token from the form submission
     * 
     * @param array $params The parameters from the form submission
     */
    public function validateCsrfToken($params) {
        // Check if the CSRF token exists in the session and the form submission
        if (empty($_SESSION['csrf_token']) || empty($params['csrf_token']) || $params['csrf_token'] !== $_SESSION['csrf_token']) {
            call_user_func([new ErrorController(), 'notFound'], null);
            die();
        }
    }

    /**
     * Render a view with the given parameters
     * 
     * @param string $view The name of the view file to render
     * @param array $params The parameters to pass to the view
     */
    public function view($view, $params = []) {
        // Extract variables from the associative array $params
        // This will make keys of the array available as variables in the view
        extract($params);

        // Convert object properties as plain variables to make them accessible in the view files
        $csrf_token = $this->csrf_token;
        $errors = $this->errors;
        $title = $this->pageTitle;

        // Store assets, populated by the view files
        $assetList = [];

        // Start output buffering
        // This captures any output generated by the included view file
        ob_start();

        // Include the specified view file, passing the extracted variables
        require_once __DIR__ . "/../views/{$view}.php";

        // Retrieve the captured output from the buffer and store it in $content
        // Then clean (erase) the buffer to avoid sending output to the browser prematurely
        $content = ob_get_clean();

        // Include the layout file
        // The layout can use the $content variable to render the view's content
        include __DIR__ . "/../views/layout/{$this->layout}.php";
    }

    /**
     * Redirect to a specified route
     * 
     * @param string $route The route to redirect to
     */
    public static function redirect($route) {
        header("Location: " . BASE_URL . "$route");
        exit;
    }
}
